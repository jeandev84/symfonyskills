<?php

namespace App\Security;

use App\Entity\User;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Symfony\Component\Security\Core\Security;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Http\Authenticator\AbstractLoginFormAuthenticator;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\CsrfTokenBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Credentials\PasswordCredentials;
use Symfony\Component\Security\Http\Authenticator\Passport\Passport;
use Symfony\Component\Security\Http\Util\TargetPathTrait;

class LoginFormAuthenticator extends AbstractLoginFormAuthenticator
{
    use TargetPathTrait;

    public const LOGIN_ROUTE = 'app_login';


    /**
     * @param UrlGeneratorInterface $urlGenerator
     * @param EntityManagerInterface $entityManager
     * @param CsrfTokenManagerInterface $csrfTokenManager
    */
    public function __construct(
        private UrlGeneratorInterface $urlGenerator,
        private EntityManagerInterface $entityManager,
        private CsrfTokenManagerInterface $csrfTokenManager,
        private UserPasswordEncoderInterface $passwordEncoder
    )
    {
    }




    /**
     * Condition for authenticate USER
     *
     * @param Request $request
     * @return bool
    */
    public function supports(Request $request): bool
    {
        return (self::LOGIN_ROUTE === $request->attributes->get('_route')) && $request->isMethod('POST');
    }



    /**
     * @param Request $request
     * @return Passport
    */
    public function authenticate(Request $request): Passport
    {
        /*
        $email = $request->request->get('email', '');

        $request->getSession()->set(Security::LAST_USERNAME, $email);

        return new Passport(
            new UserBadge($email),
            new PasswordCredentials($request->request->get('password', '')),
            [
                new CsrfTokenBadge('authenticate', $request->request->get('_csrf_token')),
            ]
        );
        */


        // Add validation here

        $plainPassword = $request->request->get('password');
        $csrfToken     = $request->request->get('csrf_token');
        $email         = $request->request->get('email', '');

        $request->getSession()->set(Security::LAST_USERNAME, $email);

        /** @var UserRepository $userRepository */

        $userRepository = $this->entityManager->getRepository(User::class);

        return new Passport(
            new UserBadge($email, function (string $userIdentifier) use ($userRepository, $credentials) {
                return $userRepository->findOneBy(['email' => $userIdentifier]);
            }),
            new PasswordCredentials($plainPassword)
        );


         // Add validation here
                $email  = $request->request->get('email', '');
                $request->getSession()->set(Security::LAST_USERNAME, $email);

                /** @var UserRepository $userRepository */

                $userRepository = $this->entityManager->getRepository(User::class);

                // dd(new PasswordCredentials($request->request->get('password')));

                $pwd = new Passport(
                    new UserBadge($email, function (string $userIdentifier) use ($userRepository) {
                        return $userRepository->findOneBy(['email' => $userIdentifier]);
                    }),
                    new PasswordCredentials($request->request->get('password')),
                    [
                        new CsrfTokenBadge('authenticate', $request->request->get('_csrf_token')),
                    ]
                );

                // dd($pwd->getUser());
    }


     /**
      * @param Request $request
      * @param TokenInterface $token
      * @param string $firewallName
      * @return Response|null
      * @throws \Exception
     */
    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
    {
        if ($targetPath = $this->getTargetPath($request->getSession(), $firewallName)) {
            return new RedirectResponse($targetPath);
        }

        // For example:
        // return new RedirectResponse($this->urlGenerator->generate('some_route'));
        throw new \Exception('TODO: provide a valid redirect inside '.__FILE__);
    }



    /**
     * @param Request $request
     * @return string
    */
    protected function getLoginUrl(Request $request): string
    {
        return $this->urlGenerator->generate(self::LOGIN_ROUTE);
    }
}
